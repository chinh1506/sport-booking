spring.application.name=booking

#server.servlet.context-path=/api

spring.datasource.url=jdbc:postgresql://localhost:5432/hello_world
spring.datasource.username=postgres
spring.datasource.password=postgres
spring.datasource.driver-class-name=org.postgresql.Driver

spring.jpa.show-sql=true
spring.jpa.properties.hibernate.format_sql=true
spring.jpa.hibernate.ddl-auto=update
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect

spring.security.oauth2.resourceserver.jwt.issuer-uri=http://localhost:8000/realms/myspringapp

#spring.jackson.property-naming-strategy=SNAKE_CASE

account-service.client-id=account-service
account-service.client-secret=fhFwE9w9VjCRHdGniDIamnEzmQdx0F6x

spring.cloud.openfeign.oauth2.enabled=true
spring.cloud.openfeign.oauth2.clientRegistrationId=account-service


spring.security.oauth2.client.registration.account-service.client-id=${account-service.client-id}
spring.security.oauth2.client.registration.account-service.client-secret=${account-service.client-secret}
spring.security.oauth2.client.registration.account-service.authorization-grant-type=client_credentials
spring.security.oauth2.client.registration.account-service.provider=account-service

spring.security.oauth2.client.provider.account-service.issuer-uri=http://localhost:8000/realms/myspringapp
spring.security.oauth2.client.provider.account-service.token-uri=http://localhost:8000/realms/myspringapp/protocol/openid-connect/token
spring.security.oauth2.client.provider.account-service.authorization-uri=http://localhost:8000/realms/myspringapp/protocol/openid-connect/auth




